// Function closures
// Go functions may be closures. A closure is a function value that references variables from outside its body. The function may access and assign to the referenced variables; in this sense the function is "bound" to the variables.

// For example, the adder function returns a closure. Each closure is bound to its own sum variable.
// Em Go, closures s√£o fun√ß√µes que capturam e usam vari√°veis definidas fora de seu escopo imediato. Elas s√£o √∫teis para encapsular estados e comportamentos de forma elegante.

// üîπ Como funciona um closure em Go?
// Um closure ocorre quando uma fun√ß√£o an√¥nima captura e usa vari√°veis de fora do seu corpo. Essas vari√°veis n√£o s√£o copiadas; em vez disso, a fun√ß√£o mant√©m uma refer√™ncia a elas.
package main

import "fmt"

func counter() func() int {
	count := 0

	return func() int {
        count++
        return count
    }
}

func mainfclsure() {
	current := counter()

	fmt.Println(current())
	fmt.Println(current())
	fmt.Println(current())

	newCounter := counter()
	fmt.Println(newCounter())
}